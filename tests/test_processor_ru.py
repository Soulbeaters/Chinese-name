# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è ChineseNameProcessor / ChineseNameProcessor Test Module
Test script for ChineseNameProcessor core functionality

–ê–≤—Ç–æ—Ä / Author: –ú–∞ –¶–∑—è—Å–∏–Ω (Ma Jiaxin)
–ü—Ä–æ–µ–∫—Ç / Project: –ò–°–¢–ò–ù–ê - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –°–∏—Å—Ç–µ–º–∞ –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ù–ê—É–∫–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                   ISTINA - Intelligent System for Thematic Investigation of Scientometric data
–ú–æ–¥—É–ª—å / Module: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∏—Ç–∞–π—Å–∫–∏—Ö –∏–º—ë–Ω
                Testing module for Chinese name processing

–û–ø–∏—Å–∞–Ω–∏–µ / Description:
–î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
—Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∏—Ç–∞–π—Å–∫–∏—Ö –∏–º—ë–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –ò–°–¢–ò–ù–ê.
–í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–≤–æ–¥—è—Ç—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö –¥–ª—è
–æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏.

This module contains test scenarios for verifying the functionality of
the Chinese name processing system in the context of integration with ISTINA system.
All test outputs are provided in Russian and English to ensure compatibility
with international standards.
"""

import sys
import os
import json
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ –ø—É—Ç—å Python / Add current directory to Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from chinese_name_processor import ChineseNameProcessor, SurnameDatabase, create_default_processor

class TestResults:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è / Test results collection class
    """
    def __init__(self):
        self.total_tests = 0
        self.passed_tests = 0
        self.failed_tests = 0
        self.test_details = []

    def add_test(self, test_name: str, passed: bool, details: str = ""):
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ / Add test result"""
        self.total_tests += 1
        if passed:
            self.passed_tests += 1
            status = "PASSED / –ü–†–û–ô–î–ï–ù"
        else:
            self.failed_tests += 1
            status = "FAILED / –ù–ï –ü–†–û–ô–î–ï–ù"

        self.test_details.append({
            'name': test_name,
            'status': status,
            'passed': passed,
            'details': details
        })

    def print_summary(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ / Print results summary"""
        print("\n" + "="*80)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø / TEST RESULTS")
        print("="*80)
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ / Total tests: {self.total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ / Passed: {self.passed_tests}")
        print(f"–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ / Failed: {self.failed_tests}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å / Success rate: {(self.passed_tests/self.total_tests)*100:.1f}%")

        if self.failed_tests == 0:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! / ALL TESTS PASSED!")
        else:
            print("‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´ / FAILED TESTS DETECTED")

def test_basic_name_parsing():
    """
    –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∏—Ç–∞–π—Å–∫–∏—Ö –∏–º—ë–Ω / Basic Chinese name parsing test
    """
    print("\n=== –¢–ï–°–¢ –ë–ê–ó–û–í–û–ì–û –ü–ê–†–°–ò–ù–ì–ê / BASIC PARSING TEST ===")

    processor = create_default_processor()
    results = TestResults()

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏: (–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ–∂–∏–¥–∞–µ–º–∞—è —Ñ–∞–º–∏–ª–∏—è, –æ–∂–∏–¥–∞–µ–º–æ–µ –∏–º—è)
    # Test cases: (input, expected surname, expected given name)
    test_cases = [
        ("ÊùéÂ∞èÊòé", "Êùé", "Â∞èÊòé"),      # Li Xiaoming - –ø—Ä–æ—Å—Ç–∞—è —Ñ–∞–º–∏–ª–∏—è / simple surname
        ("Áéã", "Áéã", ""),             # Wang - —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—è / surname only
        ("Ê¨ßÈò≥‰øÆ", "Ê¨ßÈò≥", "‰øÆ"),      # Ouyang Xiu - —Å–æ—Å—Ç–∞–≤–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è / compound surname
        ("Âè∏È©¨ÂÖâ", "Âè∏È©¨", "ÂÖâ"),      # Sima Guang - —Å–æ—Å—Ç–∞–≤–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è / compound surname
        ("Âº†‰∏â‰∏∞", "Âº†", "‰∏â‰∏∞"),      # Zhang Sanfeng - –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è / long given name
        ("ÈôàÁã¨ÁßÄ", "Èôà", "Áã¨ÁßÄ")       # Chen Duxiu - –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è / long given name
    ]

    for i, (name, expected_surname, expected_firstname) in enumerate(test_cases, 1):
        result = processor.process_name(name)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ / Check success
        success = (result.components.surname == expected_surname and
                  result.components.first_name == expected_firstname)

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ / Output results
        print(f"\n{i}. –¢–µ—Å—Ç / Test: '{name}'")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç / Result: {result.components.surname} | {result.components.first_name}")
        print(f"   –û–∂–∏–¥–∞–µ—Ç—Å—è / Expected: {expected_surname} | {expected_firstname}")
        print(f"   –î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å / Confidence: {result.confidence_score:.3f}")
        print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ / Processing time: {result.processing_time*1000:.2f}ms")
        print(f"   –°—Ç–∞—Ç—É—Å / Status: {'‚úì –ü–†–û–ô–î–ï–ù / PASSED' if success else '‚úó –ù–ï –ü–†–û–ô–î–ï–ù / FAILED'}")

        if result.errors:
            print(f"   –û—à–∏–±–∫–∏ / Errors: {result.errors}")

        details = f"Input: {name}, Output: {result.components.surname}|{result.components.first_name}"
        results.add_test(f"Basic parsing: {name}", success, details)

    return results

def test_error_handling():
    """
    –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ / Error handling test
    """
    print("\n=== –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö / ERROR HANDLING TEST ===")

    processor = create_default_processor()
    results = TestResults()

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ —Å –æ—à–∏–±–∫–∞–º–∏ / Error test cases
    error_cases = [
        ("", "–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ / empty string"),
        (None, "–∑–Ω–∞—á–µ–Ω–∏–µ None / None value"),
        ("   ", "—Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã / whitespace only"),
        ("123", "—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã / numbers only"),
        ("abc", "–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã / latin letters"),
        ("ÊùéÂ∞èÊòéÁéã‰∫î", "—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è / too long name"),
    ]

    for i, (case, description) in enumerate(error_cases, 1):
        print(f"\n{i}. –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ / Error test: {description}")
        print(f"   –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ / Input: {repr(case)}")

        result = processor.process_name(case)

        # –î–ª—è —Ç–µ—Å—Ç–æ–≤ –æ—à–∏–±–æ–∫ –æ–∂–∏–¥–∞–µ–º –Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç / For error tests we expect unsuccessful result
        expected_failure = not result.is_successful()

        print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞ / Parsing success: {result.is_successful()}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ / Error count: {len(result.errors)}")
        print(f"   –°—Ç–∞—Ç—É—Å / Status: {'‚úì –ö–û–†–†–ï–ö–¢–ù–û –û–ë–†–ê–ë–û–¢–ê–ù–û / CORRECTLY HANDLED' if expected_failure else '‚úó –û–®–ò–ë–ö–ê –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–ê / ERROR NOT DETECTED'}")

        if result.errors:
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ / Error message: {result.errors[0]}")

        results.add_test(f"Error handling: {description}", expected_failure, f"Input: {repr(case)}")

    return results

def test_batch_processing():
    """
    –¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ / Batch processing test
    """
    print("\n=== –¢–ï–°–¢ –ü–ê–ö–ï–¢–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò / BATCH PROCESSING TEST ===")

    processor = create_default_processor()
    results = TestResults()

    # –°–ø–∏—Å–æ–∫ –∏–º—ë–Ω –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ / List of names for batch processing
    names = ["ÊùéÊòé", "ÁéãÂ∞èÁ∫¢", "Âº†‰∏â", "Ê¨ßÈò≥‰øÆ", "Âè∏È©¨ÂÖâ", "ÈôàÁã¨ÁßÄ"]

    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(names)} –∏–º—ë–Ω –ø–∞–∫–µ—Ç–Ω–æ / Processing {len(names)} names in batch")

    # –ó–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ / Time measurement
    start_time = time.time()
    batch_results = processor.batch_process(names)
    end_time = time.time()

    total_time = end_time - start_time
    avg_time = total_time / len(names) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö / in milliseconds

    successful = 0
    for i, (name, result) in enumerate(zip(names, batch_results), 1):
        success = result.is_successful()
        if success:
            successful += 1

        print(f"  {i}. {name} -> {result.components.surname} | {result.components.first_name}")
        print(f"     –î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å / Confidence: {result.confidence_score:.3f}")

        if result.errors:
            print(f"     –û—à–∏–±–∫–∏ / Errors: {result.errors}")

    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ / Batch processing statistics:")
    print(f"  –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ / Successfully processed: {successful}/{len(names)}")
    print(f"  –û–±—â–µ–µ –≤—Ä–µ–º—è / Total time: {total_time:.3f}s")
    print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∏–º—è / Average time per name: {avg_time:.2f}ms")

    # –¢–µ—Å—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—Å–µ –∏–º–µ–Ω–∞ / Test passes if all names processed
    batch_success = successful == len(names)
    results.add_test("Batch processing", batch_success, f"Processed: {successful}/{len(names)}")

    return results

def test_surname_database():
    """
    –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–º–∏–ª–∏–π / Surname database test
    """
    print("\n=== –¢–ï–°–¢ –ë–ê–ó–´ –î–ê–ù–ù–´–• –§–ê–ú–ò–õ–ò–ô / SURNAME DATABASE TEST ===")

    results = TestResults()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö / Creating test database
    test_surnames = {
        'ÊµãËØï': {'pinyin': 'ceshi', 'palladius': '—Ü–µ—à–∏', 'frequency': 1, 'region': ['ÊµãËØïÂå∫']},
        'Â§çÂêàÊµã': {'pinyin': 'fuheceshi', 'palladius': '—Ñ—É—Ö—ç—Ü–µ—à–∏', 'frequency': 1, 'region': ['ÊµãËØïÂå∫']}
    }

    try:
        db = SurnameDatabase(test_surnames)
        print("‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ / Database created successfully")

        # –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ / Basic query test
        info = db.lookup_surname('ÊµãËØï')
        lookup_success = info is not None and info.pinyin == 'ceshi'
        print(f"–ü–æ–∏—Å–∫ 'ÊµãËØï' / Lookup 'ÊµãËØï': {'‚úì –ù–∞–π–¥–µ–Ω–æ / Found' if lookup_success else '‚úó –ù–µ –Ω–∞–π–¥–µ–Ω–æ / Not found'}")
        results.add_test("Basic surname lookup", lookup_success)

        # –¢–µ—Å—Ç —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —Ñ–∞–º–∏–ª–∏–π / Compound surname test
        is_compound = db.is_compound_surname('Â§çÂêàÊµã')
        compound_success = is_compound
        print(f"'Â§çÂêàÊµã' —Å–æ—Å—Ç–∞–≤–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è / 'Â§çÂêàÊµã' is compound: {'‚úì –î–∞ / Yes' if compound_success else '‚úó –ù–µ—Ç / No'}")
        results.add_test("Compound surname detection", compound_success)

        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –ø–∏–Ω—å–∏–Ω—å / Pinyin search test
        surnames = db.find_by_pinyin('ceshi')
        pinyin_success = 'ÊµãËØï' in surnames
        print(f"–ü–æ–∏—Å–∫ –ø–æ –ø–∏–Ω—å–∏–Ω—å 'ceshi' / Pinyin search 'ceshi': {'‚úì –ù–∞–π–¥–µ–Ω–æ / Found' if pinyin_success else '‚úó –ù–µ –Ω–∞–π–¥–µ–Ω–æ / Not found'}")
        results.add_test("Pinyin-based search", pinyin_success)

        # –¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è / Dynamic addition test
        add_success = db.add_surname('Êñ∞Âßì', {
            'pinyin': 'xinxing',
            'palladius': '—Å–∏–Ω—Å–∏–Ω',
            'frequency': 1,
            'region': ['ÊµãËØïÂå∫']
        })
        print(f"–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏ / Dynamic surname addition: {'‚úì –£—Å–ø–µ—à–Ω–æ / Success' if add_success else '‚úó –ù–µ—É–¥–∞—á–∞ / Failed'}")
        results.add_test("Dynamic surname addition", add_success)

        # –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ / Export test
        try:
            test_file = "test_surnames_export.json"
            db.export_to_json(test_file)
            export_success = os.path.exists(test_file)
            print(f"–≠–∫—Å–ø–æ—Ä—Ç –≤ JSON / JSON export: {'‚úì –£—Å–ø–µ—à–Ω–æ / Success' if export_success else '‚úó –ù–µ—É–¥–∞—á–∞ / Failed'}")

            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ / Clean up test file
            if export_success and os.path.exists(test_file):
                os.remove(test_file)

            results.add_test("JSON export", export_success)

        except Exception as e:
            print(f"–≠–∫—Å–ø–æ—Ä—Ç –≤ JSON / JSON export: ‚úó –û—à–∏–±–∫–∞ / Error - {e}")
            results.add_test("JSON export", False, str(e))

    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö / Database creation error: {e}")
        results.add_test("Database creation", False, str(e))

    return results

def test_performance_benchmark():
    """
    –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ / Performance benchmark test
    """
    print("\n=== –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò / PERFORMANCE BENCHMARK TEST ===")

    processor = create_default_processor()
    results = TestResults()

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª—å—à–µ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    # Creating larger dataset for performance test
    base_names = ["ÊùéÊòé", "ÁéãÂ∞èÁ∫¢", "Âº†‰∏â", "Ê¨ßÈò≥‰øÆ", "Âè∏È©¨ÂÖâ"]
    test_names = base_names * 200  # 1000 –∏–º—ë–Ω / 1000 names

    print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ {len(test_names)} –∏–º–µ–Ω–∞—Ö")
    print(f"Performance testing on {len(test_names)} names")

    # –ó–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ / Batch processing time measurement
    start_time = time.time()
    batch_results = processor.batch_process(test_names)
    end_time = time.time()

    total_time = end_time - start_time
    avg_time = total_time / len(test_names) * 1000  # –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã / milliseconds
    names_per_second = len(test_names) / total_time

    successful = sum(1 for r in batch_results if r.is_successful())
    success_rate = (successful / len(test_names)) * 100

    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ / Performance results:")
    print(f"  –û–±—â–µ–µ –≤—Ä–µ–º—è / Total time: {total_time:.3f} —Å–µ–∫—É–Ω–¥ / seconds")
    print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∏–º—è / Average time per name: {avg_time:.3f} –º—Å / ms")
    print(f"  –ò–º—ë–Ω –≤ —Å–µ–∫—É–Ω–¥—É / Names per second: {names_per_second:.1f}")
    print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å / Success rate: {success_rate:.1f}%")

    # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ / Performance criteria
    acceptable_avg_time = 10.0  # –º—Å / ms
    acceptable_success_rate = 95.0  # %

    performance_ok = avg_time <= acceptable_avg_time and success_rate >= acceptable_success_rate

    print(f"\n–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ / Performance evaluation:")
    print(f"  –ö—Ä–∏—Ç–µ—Ä–∏–π –≤—Ä–µ–º–µ–Ω–∏ / Time criterion: {'‚úì –ü—Ä–æ–π–¥–µ–Ω / Passed' if avg_time <= acceptable_avg_time else '‚úó –ù–µ –ø—Ä–æ–π–¥–µ–Ω / Failed'}")
    print(f"  –ö—Ä–∏—Ç–µ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ / Success criterion: {'‚úì –ü—Ä–æ–π–¥–µ–Ω / Passed' if success_rate >= acceptable_success_rate else '‚úó –ù–µ –ø—Ä–æ–π–¥–µ–Ω / Failed'}")

    results.add_test("Performance benchmark", performance_ok,
                    f"Avg time: {avg_time:.3f}ms, Success: {success_rate:.1f}%")

    return results

def test_istina_integration_compatibility():
    """
    –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –ò–°–¢–ò–ù–ê / ISTINA system integration compatibility test
    """
    print("\n=== –¢–ï–°–¢ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –° –°–ò–°–¢–ï–ú–û–ô –ò–°–¢–ò–ù–ê / ISTINA COMPATIBILITY TEST ===")

    processor = create_default_processor()
    results = TestResults()

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏, —Ç–∏–ø–∏—á–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ò–°–¢–ò–ù–ê
    # Test cases typical for ISTINA system
    istina_test_cases = [
        "ÊùéÊòé",           # –ü—Ä–æ—Å—Ç–æ–µ –∫–∏—Ç–∞–π—Å–∫–æ–µ –∏–º—è / Simple Chinese name
        "Li Ming",        # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –ø–∏–Ω—å–∏–Ω—å / Pinyin transliteration
        "–õ–∏ –ú–∏–Ω",         # –†—É—Å—Å–∫–∞—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è / Russian transliteration
        "Zhang, Wei",     # –ó–∞–ø–∞–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç / Western format
        "Ê¨ßÈò≥‰øÆ",         # –°–æ—Å—Ç–∞–≤–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è / Compound surname
        "Sima Guang",     # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–æ—Å—Ç–∞–≤–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è / Transliterated compound surname
    ]

    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏–º—ë–Ω, —Ç–∏–ø–∏—á–Ω—ã—Ö –¥–ª—è –ò–°–¢–ò–ù–ê:")
    print("Testing name formats typical for ISTINA:")

    total_processed = 0
    successful_parses = 0

    for i, name in enumerate(istina_test_cases, 1):
        result = processor.process_name(name)
        total_processed += 1

        if result.is_successful():
            successful_parses += 1
            status = "‚úì –£–°–ü–ï–®–ù–û / SUCCESS"
        else:
            status = "‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê / ISSUE"

        print(f"  {i}. '{name}' -> {result.components.surname} | {result.components.first_name}")
        print(f"     –¢–∏–ø / Type: {result.components.source_type}")
        print(f"     –î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å / Confidence: {result.confidence_score:.3f}")
        print(f"     –°—Ç–∞—Ç—É—Å / Status: {status}")

        if result.errors:
            print(f"     –û—à–∏–±–∫–∏ / Errors: {result.errors}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –ò–°–¢–ò–ù–ê / ISTINA format compatibility check
        istina_compatible = result.is_successful() and result.confidence_score >= 0.7
        results.add_test(f"ISTINA compatibility: {name}", istina_compatible)

    compatibility_rate = (successful_parses / total_processed) * 100
    print(f"\n–û–±—â–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ò–°–¢–ò–ù–ê / Overall ISTINA compatibility: {compatibility_rate:.1f}%")

    # –¢–µ—Å—Ç JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ò–°–¢–ò–ù–ê / JSON serialization test for ISTINA
    try:
        result = processor.process_name("ÊùéÊòé")
        json_data = json.dumps(result.to_dict(), ensure_ascii=False, indent=2)
        json_success = len(json_data) > 0 and '"surname"' in json_data
        print(f"JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è / JSON serialization: {'‚úì –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è / Supported' if json_success else '‚úó –ü—Ä–æ–±–ª–µ–º–∞ / Issue'}")
        results.add_test("JSON serialization", json_success)
    except Exception as e:
        print(f"JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è / JSON serialization: ‚úó –û—à–∏–±–∫–∞ / Error - {e}")
        results.add_test("JSON serialization", False, str(e))

    return results

def run_complete_test_suite():
    """
    –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ / Run complete test suite
    """
    print("–°–ò–°–¢–ï–ú–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ö–ò–¢–ê–ô–°–ö–ò–• –ò–ú–Å–ù –î–õ–Ø –ò–°–¢–ò–ù–ê")
    print("CHINESE NAME PROCESSING TEST SYSTEM FOR ISTINA")
    print("="*80)
    print("–ê–≤—Ç–æ—Ä / Author: –ú–∞ –¶–∑—è—Å–∏–Ω (Ma Jiaxin)")
    print("–î–∞—Ç–∞ / Date:", time.strftime("%Y-%m-%d %H:%M:%S"))
    print("="*80)

    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ / List of all tests
    test_functions = [
        ("–ë–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ / Basic parsing", test_basic_name_parsing),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ / Error handling", test_error_handling),
        ("–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ / Batch processing", test_batch_processing),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–º–∏–ª–∏–π / Surname database", test_surname_database),
        ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å / Performance", test_performance_benchmark),
        ("–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ò–°–¢–ò–ù–ê / ISTINA compatibility", test_istina_integration_compatibility)
    ]

    # –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã / Overall results
    overall_results = TestResults()

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ / Execute all tests
    for test_name, test_func in test_functions:
        print(f"\nüîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ / Running test: {test_name}")
        try:
            test_result = test_func()

            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ / Merge results
            overall_results.total_tests += test_result.total_tests
            overall_results.passed_tests += test_result.passed_tests
            overall_results.failed_tests += test_result.failed_tests
            overall_results.test_details.extend(test_result.test_details)

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ / Critical error in test {test_name}: {e}")
            overall_results.add_test(f"CRITICAL: {test_name}", False, str(e))

    # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å–≤–æ–¥–∫–∏ / Print final summary
    overall_results.print_summary()

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ò–°–¢–ò–ù–ê / Recommendations for ISTINA integration
    print("\n" + "="*80)
    print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –ò–°–¢–ò–ù–ê / ISTINA INTEGRATION RECOMMENDATIONS")
    print("="*80)

    if overall_results.failed_tests == 0:
        print("‚úÖ –ú–æ–¥—É–ª—å –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –ò–°–¢–ò–ù–ê")
        print("‚úÖ Module is ready for ISTINA system integration")
    elif overall_results.failed_tests <= overall_results.total_tests * 0.1:  # –ú–µ–Ω–µ–µ 10% –Ω–µ—É–¥–∞—á / Less than 10% failures
        print("‚ö†Ô∏è  –ú–æ–¥—É–ª—å –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞–º–∏")
        print("‚ö†Ô∏è  Module is ready for integration with minor improvements")
    else:
        print("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
        print("‚ùå Additional improvements required before integration")

    return overall_results

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ / Run complete test suite
    results = run_complete_test_suite()

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ / Completion
    print(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ / Testing completed: {time.strftime('%Y-%m-%d %H:%M:%S')}")

    # –ö–æ–¥ –≤—ã—Ö–æ–¥–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ / Exit code for automation
    exit_code = 0 if results.failed_tests == 0 else 1
    print(f"–ö–æ–¥ –≤—ã—Ö–æ–¥–∞ / Exit code: {exit_code}")
    sys.exit(exit_code)